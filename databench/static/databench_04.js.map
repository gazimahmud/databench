{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/main.js","js/ui.js"],"names":[],"mappings":"AAAA;;;;;ICAY;;;;;AAGZ,IAAI,cAAc,OAAO,WAAP,IAAsB,EAAtB;AAClB,YAAY,EAAZ,GAAiB,EAAjB;AACA,OAAO,WAAP,GAAqB,WAArB;;;;;;;;;;;;;ICJa;AACZ,UADY,GACZ,CAAY,IAAZ,EAAiD;;;MAA/B,8DAAM,kBAAyB;MAArB,sEAAc,qBAAO;;wBADrC,KACqC;;AAChD,OAAK,IAAL,GAAY,IAAZ,CADgD;AAEhD,OAAK,KAAL,GAAa,KAAb,CAFgD;AAGhD,OAAK,aAAL,GAAqB,aAArB,CAHgD;;AAKhD,OAAK,SAAL,GAAiB,EAAjB;;;AALgD,MAQhD,CAAK,kBAAL,GAA0B,QAAQ,aAAR,CAA1B,CARgD;AAShD,UAAQ,aAAR,IAAyB,UAAC,GAAD;UAAS,MAAK,GAAL,CAAS,GAAT,EAAc,WAAd;GAAT,CATuB;EAAjD;;cADY;;2BAaH;AACR,UAAM,KAAK,SAAL,CAAe,MAAf,GAAwB,KAAK,KAAL;AAAY,SAAK,SAAL,CAAe,KAAf;IAA1C;AADQ,OAIR,CAAK,IAAL,CAAU,SAAV,GAAsB,KAAK,SAAL,CAAe,GAAf,CAAmB,UAAC,CAAD;WAAO,EAAE,IAAF,CAAO,EAAP;IAAP,CAAnB,CAAsC,IAAtC,CAA2C,IAA3C,CAAtB,CAJQ;;;;sBAOL,SAA4B;OAAnB,+DAAO,0BAAY;;AAC/B,QAAK,kBAAL,CAAwB,KAAxB,CAA8B,OAA9B,EAAuC,CAAC,OAAD,CAAvC,EAD+B;AAE/B,QAAK,SAAL,CAAe,IAAf,CAAoB,CAAC,MAAD,EAAS,OAAT,CAApB,EAF+B;AAG/B,QAAK,MAAL,GAH+B;;;;QApBpB;;;AAyBZ","file":"databench_04.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import * as ui from './ui';\n\n// create a public interface\nvar Databench04 = window.Databench04 || {};\nDatabench04.ui = ui;\nwindow.Databench04 = Databench04;\n","\nexport class Log {\n\tconstructor(node, limit=20, consoleFnName='log') {\n\t\tthis.node = node;\n\t\tthis.limit = limit;\n\t\tthis.consoleFnName = consoleFnName;\n\n\t\tthis._messages = [];\n\n\t\t// capture events from frontend\n\t\tthis._consoleFnOriginal = console[consoleFnName];\n\t\tconsole[consoleFnName] = (msg) => this.add(msg, 'frontend:');\n\t}\n\n\trender() {\n\t\twhile(this._messages.length > this.limit) this._messages.shift();\n\n\t\t// for HTML output, json-stringify messages and join with <br>\n\t\tthis.node.innerText = this._messages.map((m) => m.join('')).join('\\n');\n\t}\n\n\tadd(message, source='unknown:') {\n\t\tthis._consoleFnOriginal.apply(console, [message]);\n\t\tthis._messages.push([source, message]);\n\t\tthis.render();\n\t};\n};\n"]}